name: Auto PR Creation

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for PR'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - staging

jobs:
  # 자동 PR 생성 (develop → main)
  create-auto-pr:
    name: 🤖 Auto PR Creation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check for changes
        id: changes
        run: |
          # main 브랜치와 비교하여 변경사항 확인
          git fetch origin main
          CHANGES=$(git log origin/main..HEAD --oneline | wc -l)
          echo "changes=$CHANGES" >> $GITHUB_OUTPUT
          
          if [ "$CHANGES" -gt 0 ]; then
            echo "🔄 $CHANGES commits ahead of main"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No changes to merge"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Generate PR body
        id: pr-body
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # 커밋 히스토리 기반 PR 본문 생성
          echo "## 🚀 자동 생성된 PR" > pr_body.md
          echo "" >> pr_body.md
          echo "이 PR은 develop 브랜치의 변경사항을 main으로 병합합니다." >> pr_body.md
          echo "" >> pr_body.md
          echo "### 📋 포함된 커밋들:" >> pr_body.md
          git log origin/main..HEAD --oneline --pretty=format:"- %s (%an)" >> pr_body.md
          echo "" >> pr_body.md
          echo "" >> pr_body.md
          echo "### ✅ 체크리스트:" >> pr_body.md
          echo "- [x] CI/CD 파이프라인 통과" >> pr_body.md
          echo "- [x] 코드 리뷰 완료 (develop 브랜치)" >> pr_body.md  
          echo "- [x] 보안 검사 통과" >> pr_body.md
          echo "- [ ] 수동 테스트 완료" >> pr_body.md
          echo "" >> pr_body.md
          echo "### 🤖 자동화 정보:" >> pr_body.md
          echo "- **생성 시간**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')" >> pr_body.md
          echo "- **트리거**: develop 브랜치 push" >> pr_body.md
          echo "- **커밋 수**: ${{ steps.changes.outputs.changes }}개" >> pr_body.md
          echo "" >> pr_body.md
          echo "---" >> pr_body.md
          echo "🤖 *이 PR은 GitHub Actions에 의해 자동으로 생성되었습니다.*" >> pr_body.md

      - name: 🔍 Check existing PR
        id: existing-pr
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          # 기존 open PR이 있는지 확인
          EXISTING_PR=$(gh pr list --base main --head develop --state open --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ ! -z "$EXISTING_PR" ]; then
            echo "existing_pr=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "🔄 기존 PR #$EXISTING_PR 발견"
          else
            echo "existing_pr=" >> $GITHUB_OUTPUT
            echo "✨ 새 PR 생성 필요"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Create PR
        if: steps.changes.outputs.has_changes == 'true' && steps.existing-pr.outputs.existing_pr == ''
        run: |
          gh pr create \
            --title "🚀 Auto-merge develop → main" \
            --body-file pr_body.md \
            --base main \
            --head develop \
            --label "auto-generated,ready-for-review" \
            --assignee "@me"
          
          echo "✅ 새 PR이 생성되었습니다!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update existing PR  
        if: steps.changes.outputs.has_changes == 'true' && steps.existing-pr.outputs.existing_pr != ''
        run: |
          gh pr edit ${{ steps.existing-pr.outputs.existing_pr }} \
            --body-file pr_body.md \
            --add-label "updated"
          
          echo "✅ 기존 PR #${{ steps.existing-pr.outputs.existing_pr }}이 업데이트되었습니다!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📢 Send notification
        if: steps.changes.outputs.has_changes == 'true' && secrets.TELEGRAM_BOT_TOKEN != ''
        run: |
          PR_NUMBER=$(gh pr list --base main --head develop --state open --json number --jq '.[0].number' 2>/dev/null || echo "")
          PR_URL="https://github.com/${{ github.repository }}/pull/$PR_NUMBER"
          
          MESSAGE="🤖 **자동 PR 생성됨**
          
          Repository: ${{ github.repository }}
          Branch: develop → main
          Commits: ${{ steps.changes.outputs.changes }}개
          
          🔗 [PR 확인하기]($PR_URL)
          
          ⏰ $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 수동 트리거된 PR 생성
  manual-pr:
    name: 🎯 Manual PR Creation  
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📝 Create manual PR
        run: |
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          SOURCE_BRANCH="${{ github.ref_name }}"
          
          echo "🎯 Creating PR: $SOURCE_BRANCH → $TARGET_BRANCH"
          
          gh pr create \
            --title "🎯 Manual PR: $SOURCE_BRANCH → $TARGET_BRANCH" \
            --body "수동으로 생성된 PR입니다.
            
            **변경사항**: $SOURCE_BRANCH 브랜치의 최신 변경사항을 $TARGET_BRANCH로 병합
            **생성자**: @${{ github.actor }}
            **생성 시간**: $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST')" \
            --base "$TARGET_BRANCH" \
            --head "$SOURCE_BRANCH" \
            --label "manual,ready-for-review" \
            --assignee "@me"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}