name: Deploy to Vercel

on:
  # 자동 배포 비활성화 - 수동 배포만 허용
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

# Prevent multiple deployments from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  DEPLOYMENT_URL: "https://dduksang.com"

jobs:
  # Pre-deployment validation
  validate:
    name: Validate Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit
          
      - name: Run linting
        run: npm run lint
        
      - name: Type checking
        run: npm run type-check
        
      - name: Environment validation
        run: |
          echo "🔍 Validating environment setup..."
          npm run env:validate || echo "Environment validation completed with warnings"
        env:
          NODE_ENV: production
        continue-on-error: true
          
      - name: Build test
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          ENCRYPTION_KEY: ${{ secrets.ENCRYPTION_KEY }}
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          
      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
        
      - name: Pull Vercel environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Build project
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        
      - name: Deploy to Vercel
        id: deploy
        run: |
          deployment_url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=${deployment_url}" >> $GITHUB_OUTPUT
          
          # Extract deployment ID from URL
          deployment_id=$(echo $deployment_url | grep -oP 'https://[^.]+')
          echo "deployment-id=${deployment_id}" >> $GITHUB_OUTPUT
          
      - name: Send Telegram notification (Deployment Started)
        run: |
          # 현재 시간 저장
          CURRENT_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # HEREDOC을 사용한 안전한 JSON payload 생성
          cat > telegram_message.json << 'JSON_EOF'
{
  "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
  "text": "🚀 **dduksangLAB 배포 시작**\n\n📝 **커밋**: \`${{ github.event.head_commit.message }}\`\n👤 **작성자**: ${{ github.event.head_commit.author.name }}\n🌐 **URL**: ${{ steps.deploy.outputs.url }}\n⏰ **시간**: CURRENT_TIME_PLACEHOLDER",
  "parse_mode": "Markdown"
}
JSON_EOF
          
          # 시간 치환
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${CURRENT_TIME}/g" telegram_message.json
          
          # 텔레그램으로 전송
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @telegram_message.json
  # Playwright E2E Testing
  e2e-test:
    name: E2E Testing
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: Install Playwright
        run: |
          npm install -D @playwright/test@latest
          npx playwright install chromium
          
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" "${{ needs.deploy.outputs.deployment-url }}" | grep -q "200"; then
              echo "Deployment is ready!"
              break
            fi
            echo "Attempt $i: Deployment not ready, waiting 10 seconds..."
            sleep 10
          done
          
      - name: Create Playwright config
        run: |
          cat > playwright.config.js << 'EOF'
          module.exports = {
            testDir: './e2e-tests',
            timeout: 30000,
            retries: 2,
            use: {
              baseURL: '${{ needs.deploy.outputs.deployment-url }}',
              headless: true,
              viewport: { width: 1280, height: 720 },
              screenshot: 'only-on-failure',
              video: 'retain-on-failure',
            },
            projects: [
              {
                name: 'chromium',
                use: { ...require('@playwright/test').devices['Desktop Chrome'] },
              },
            ],
          };
          EOF
          
      - name: Create E2E tests
        run: |
          mkdir -p e2e-tests
          cat > e2e-tests/basic.spec.js << 'EOF'
          const { test, expect } = require('@playwright/test');
          
          test.describe('dduksangLAB Basic Tests', () => {
            test('Homepage loads correctly', async ({ page }) => {
              await page.goto('/');
              await expect(page).toHaveTitle(/떡상연구소/);
              
              // Check if main navigation exists
              await expect(page.locator('nav')).toBeVisible();
              
              // Check for critical elements
              await expect(page.locator('header')).toBeVisible();
              await expect(page.locator('footer')).toBeVisible();
            });
            
            test('AI Trends page loads', async ({ page }) => {
              await page.goto('/ai-trends');
              await expect(page).toHaveURL(/.*ai-trends.*/);
              
              // Wait for content to load
              await page.waitForLoadState('networkidle');
              
              // Check if page loaded successfully
              await expect(page.locator('h1, h2, .main-content')).toBeVisible();
            });
            
            test('Auth pages are accessible', async ({ page }) => {
              // Test login page
              await page.goto('/auth/login');
              await expect(page.locator('form')).toBeVisible();
              
              // Test signup page  
              await page.goto('/auth/signup');
              await expect(page.locator('form')).toBeVisible();
            });
            
            test('API health check', async ({ request }) => {
              // Test if API endpoints are accessible
              const response = await request.get('/api/ai-trends');
              expect(response.status()).toBeLessThan(500);
            });
          });
          EOF
          
      - name: Run Playwright tests
        id: e2e-tests
        run: npx playwright test
        continue-on-error: true
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Final notification and rollback handling
  finalize:
    name: Finalize Deployment
    needs: [deploy, e2e-test]
    if: always() && needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Vercel CLI
        if: needs.e2e-test.result == 'failure'
        run: npm install -g vercel@latest
        
      - name: Rollback on test failure
        if: needs.e2e-test.result == 'failure'
        run: |
          echo "E2E tests failed. Initiating rollback..."
          
          # Get previous successful deployment
          previous_deployment=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep -v "${{ needs.deploy.outputs.deployment-id }}" | head -n 1 | awk '{print $1}')
          
          if [[ -n "$previous_deployment" ]]; then
            echo "Rolling back to: $previous_deployment"
            vercel promote $previous_deployment --token=${{ secrets.VERCEL_TOKEN }}
          else
            echo "No previous deployment found for rollback"
          fi
          
      - name: Send success notification
        if: needs.e2e-test.result == 'success'
        run: |
          # 현재 시간 저장
          CURRENT_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # HEREDOC을 사용한 안전한 JSON payload 생성
          cat > success_message.json << 'JSON_EOF'
{
  "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
  "text": "✅ **dduksangLAB 배포 성공**\n\n📝 **커밋**: \`${{ github.event.head_commit.message }}\`\n👤 **작성자**: ${{ github.event.head_commit.author.name }}\n🌐 **URL**: ${{ env.DEPLOYMENT_URL }}\n🧪 **E2E 테스트**: 통과\n⏰ **완료 시간**: CURRENT_TIME_PLACEHOLDER\n\n🎉 새로운 버전이 성공적으로 배포되었습니다\!",
  "parse_mode": "Markdown"
}
JSON_EOF
          
          # 시간 치환
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${CURRENT_TIME}/g" success_message.json
          
          # 텔레그램으로 전송
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @success_message.json
            
      - name: Send failure notification
        if: needs.e2e-test.result == 'failure'
        run: |
          # 현재 시간 저장
          CURRENT_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # HEREDOC을 사용한 안전한 JSON payload 생성
          cat > failure_message.json << 'JSON_EOF'
{
  "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
  "text": "❌ **dduksangLAB 배포 실패**\n\n📝 **커밋**: \`${{ github.event.head_commit.message }}\`\n👤 **작성자**: ${{ github.event.head_commit.author.name }}\n🧪 **E2E 테스트**: 실패\n🔄 **롤백**: 진행 중\n⏰ **시간**: CURRENT_TIME_PLACEHOLDER\n\n⚠️ 이전 버전으로 롤백이 수행되었습니다.\nGitHub Actions에서 로그를 확인해주세요.",
  "parse_mode": "Markdown"
}
JSON_EOF
          
          # 시간 치환
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${CURRENT_TIME}/g" failure_message.json
          
          # 텔레그램으로 전송
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @failure_message.json
            
      - name: Send general failure notification
        if: needs.deploy.result == 'failure'
        run: |
          # 현재 시간 저장
          CURRENT_TIME=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M:%S KST')
          
          # HEREDOC을 사용한 안전한 JSON payload 생성
          cat > general_failure_message.json << 'JSON_EOF'
{
  "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
  "text": "🚨 **dduksangLAB 배포 오류**\n\n📝 **커밋**: \`${{ github.event.head_commit.message }}\`\n👤 **작성자**: ${{ github.event.head_commit.author.name }}\n❌ **상태**: 배포 실패\n⏰ **시간**: CURRENT_TIME_PLACEHOLDER\n\n🔧 GitHub Actions에서 상세한 오류 로그를 확인해주세요.",
  "parse_mode": "Markdown"
}
JSON_EOF
          
          # 시간 치환
          sed -i "s/CURRENT_TIME_PLACEHOLDER/${CURRENT_TIME}/g" general_failure_message.json
          
          # 텔레그램으로 전송
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @general_failure_message.json

