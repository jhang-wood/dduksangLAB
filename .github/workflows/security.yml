name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write

jobs:
  # CodeQL Analysis
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        language: ['typescript']
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-and-quality

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build project
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: 📊 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Enhanced Trivy Security Scan
  trivy:
    name: 🛡️ Enhanced Trivy Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🔄 Cache Trivy database
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - name: 🔍 Run Trivy vulnerability scanner (Critical/High only)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'  
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

      - name: 📤 Upload Trivy results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-results
          path: trivy-results.sarif
          retention-days: 30

      - name: 📊 Generate Trivy Report Summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'  
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: 0

  # Snyk Security Scan
  snyk:
    name: 🔐 Snyk Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't fail the workflow if Snyk is not configured
    if: ${{ secrets.SNYK_TOKEN != '' }}  # Only run if Snyk token is available
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json

  # GitHub Dependency Review
  dependency-review:
    name: 📦 Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0
          comment-summary-in-pr: always

  # OWASP Dependency Check
  owasp:
    name: 🌐 OWASP Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'dduksangLAB'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: 📤 Upload Test results
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check-report
          path: reports/
          retention-days: 7

  # Scorecard Security Analysis
  scorecard:
    name: 🏆 Scorecard Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
      contents: read
      actions: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: 🔍 Run analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: 📤 Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SARIF file
          path: results.sarif
          retention-days: 5

      - name: 📊 Upload Scorecard results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: scorecard-security-results
          path: results.sarif
          retention-days: 30

  # Secret Scanning
  secret-scan:
    name: 🔑 Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --fail
        continue-on-error: false

  # License Check
  license-check:
    name: 📜 License Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📜 Check licenses
        run: |
          npx license-checker --production --summary --excludePrivatePackages
          echo "### License Summary" >> $GITHUB_STEP_SUMMARY
          npx license-checker --production --summary --excludePrivatePackages >> $GITHUB_STEP_SUMMARY

  # Security Summary and Notification
  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, trivy, snyk, owasp, scorecard, secret-scan, license-check]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Scanner | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Trivy | ${{ needs.trivy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk | ${{ needs.snyk.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP | ${{ needs.owasp.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Scorecard | ${{ needs.scorecard.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: 📨 Send Telegram notification
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        run: |
          STATUS_EMOJI="✅"
          STATUS_TEXT="All security scans completed"
          
          if [[ "${{ needs.codeql.result }}" == "failure" ]] || \
             [[ "${{ needs.trivy.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            STATUS_EMOJI="🚨"
            STATUS_TEXT="Security issues detected!"
          fi
          
          MESSAGE="$STATUS_EMOJI *Security Scan Results*
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          
          CodeQL: ${{ needs.codeql.result }}
          Trivy: ${{ needs.trivy.result }}
          Snyk: ${{ needs.snyk.result }}
          Secret Scan: ${{ needs.secret-scan.result }}
          
          $STATUS_TEXT
          
          [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d "text=$MESSAGE" \
            -d "parse_mode=Markdown" \
            -d "disable_web_page_preview=true"