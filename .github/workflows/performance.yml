name: üöÄ ÏÑ±Îä• ÏµúÏ†ÅÌôî Î∞è Î™®ÎãàÌÑ∞ÎßÅ

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Îß§Ïùº Ïò§Ï†Ñ 11Ïãú (KST)
  workflow_dispatch:
    inputs:
      analysis_level:
        description: 'Î∂ÑÏÑù ÏàòÏ§Ä'
        required: true
        default: 'standard'
        type: choice
        options:
          - minimal
          - standard
          - comprehensive

env:
  NODE_VERSION: '20'
  PERFORMANCE_BUDGET_SIZE: '500KB'
  PERFORMANCE_BUDGET_SPEED: '3000'

jobs:
  # Bundle Î∂ÑÏÑù Î∞è ÏµúÏ†ÅÌôî
  bundle-analysis:
    name: üì¶ Bundle Î∂ÑÏÑù
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: üîß Node.js ÏÑ§Ï†ï
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
        run: |
          npm ci --no-audit --no-fund
          npm install --no-save @next/bundle-analyzer webpack-bundle-analyzer

      - name: üìä Bundle Analyzer ÏÑ§Ï†ï
        run: |
          cat > next.config.analyzer.js << 'EOF'
          const withBundleAnalyzer = require('@next/bundle-analyzer')({
            enabled: true,
            openAnalyzer: false
          })
          
          const nextConfig = {
            // Í∏∞Ï°¥ next.config.js ÏÑ§Ï†ïÎì§ÏùÑ Ïó¨Í∏∞Ïóê Î≥µÏÇ¨
            experimental: {
              optimizeCss: true,
            },
            compiler: {
              removeConsole: process.env.NODE_ENV === 'production',
            },
            images: {
              formats: ['image/avif', 'image/webp'],
              minimumCacheTTL: 31536000,
            }
          }
          
          module.exports = withBundleAnalyzer(nextConfig)
          EOF

      - name: üèóÔ∏è ÌîÑÎ°úÎçïÏÖò ÎπåÎìú (Bundle Î∂ÑÏÑù Ìè¨Ìï®)
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder_key' }}
        run: |
          echo "üî® Bundle Î∂ÑÏÑùÍ≥º Ìï®Íªò ÌîÑÎ°úÎçïÏÖò ÎπåÎìú ÏãúÏûë..."
          cp next.config.analyzer.js next.config.js
          npm run build
          
          # Bundle ÌÅ¨Í∏∞ Î∂ÑÏÑù
          if [ -d ".next/static" ]; then
            BUNDLE_SIZE=$(du -sm .next/static | cut -f1)
            JS_SIZE=$(find .next/static -name "*.js" -exec ls -la {} \; | awk '{sum += $5} END {print sum/1024/1024}' || echo "0")
            CSS_SIZE=$(find .next/static -name "*.css" -exec ls -la {} \; | awk '{sum += $5} END {print sum/1024/1024}' || echo "0")
            
            echo "bundle-total-size=${BUNDLE_SIZE}" >> $GITHUB_OUTPUT
            echo "bundle-js-size=${JS_SIZE}" >> $GITHUB_OUTPUT  
            echo "bundle-css-size=${CSS_SIZE}" >> $GITHUB_OUTPUT
            
            echo "üìä Bundle ÌÅ¨Í∏∞ Î∂ÑÏÑù:"
            echo "  Ï†ÑÏ≤¥: ${BUNDLE_SIZE}MB"
            echo "  JS: ${JS_SIZE}MB"
            echo "  CSS: ${CSS_SIZE}MB"
            
            # ÌÅ¨Í∏∞ Í≤ΩÍ≥†
            if [ "$BUNDLE_SIZE" -gt 10 ]; then
              echo "‚ö†Ô∏è Bundle ÌÅ¨Í∏∞Í∞Ä ÌÅΩÎãàÎã§ (${BUNDLE_SIZE}MB > 10MB)"
              echo "::warning::Large bundle size: ${BUNDLE_SIZE}MB"
            fi
          fi

      - name: üìà Bundle ÌÅ¨Í∏∞ Î≥ÄÌôî Ï∂îÏ†Å
        if: github.event_name == 'pull_request'
        run: |
          echo "üìä Bundle ÌÅ¨Í∏∞ Î≥ÄÌôî Î∂ÑÏÑù..."
          
          # Ïù¥Ï†Ñ Ïª§Î∞ãÍ≥º ÎπÑÍµê
          git checkout HEAD~1
          npm run build
          PREV_BUNDLE_SIZE=$(du -sm .next/static 2>/dev/null | cut -f1 || echo "0")
          
          git checkout -
          npm run build
          CURR_BUNDLE_SIZE=$(du -sm .next/static 2>/dev/null | cut -f1 || echo "0")
          
          SIZE_DIFF=$((CURR_BUNDLE_SIZE - PREV_BUNDLE_SIZE))
          
          echo "Bundle ÌÅ¨Í∏∞ Î≥ÄÌôî:"
          echo "  Ïù¥Ï†Ñ: ${PREV_BUNDLE_SIZE}MB"
          echo "  ÌòÑÏû¨: ${CURR_BUNDLE_SIZE}MB"
          echo "  Î≥ÄÌôî: ${SIZE_DIFF}MB"
          
          if [ "$SIZE_DIFF" -gt 1 ]; then
            echo "‚ö†Ô∏è Bundle ÌÅ¨Í∏∞Í∞Ä ÌÅ¨Í≤å Ï¶ùÍ∞ÄÌñàÏäµÎãàÎã§ (+${SIZE_DIFF}MB)"
            echo "::warning::Bundle size increased significantly: +${SIZE_DIFF}MB"
          elif [ "$SIZE_DIFF" -lt -1 ]; then
            echo "‚úÖ Bundle ÌÅ¨Í∏∞Í∞Ä Í∞êÏÜåÌñàÏäµÎãàÎã§ (${SIZE_DIFF}MB)"
          fi

      - name: üñºÔ∏è Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî Í≤ÄÏ¶ù
        run: |
          echo "üîç Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî ÏÉÅÌÉú Í≤ÄÏÇ¨..."
          
          # Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ïä§Ï∫î
          image_files=$(find public -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" \) 2>/dev/null || echo "")
          
          if [ -n "$image_files" ]; then
            large_images=()
            total_size=0
            
            while IFS= read -r img; do
              size=$(stat -c%s "$img" 2>/dev/null || echo "0")
              size_mb=$(echo "scale=2; $size/1024/1024" | bc -l)
              total_size=$((total_size + size))
              
              echo "  $img: ${size_mb}MB"
              
              # 1MB Ïù¥ÏÉÅ Ïù¥ÎØ∏ÏßÄ Í≤ΩÍ≥†
              if [ "$size" -gt 1048576 ]; then
                large_images+=("$img (${size_mb}MB)")
              fi
            done <<< "$image_files"
            
            total_size_mb=$(echo "scale=2; $total_size/1024/1024" | bc -l)
            echo "Ï¥ù Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞: ${total_size_mb}MB"
            
            if [ ${#large_images[@]} -gt 0 ]; then
              echo "‚ö†Ô∏è 1MB Ïù¥ÏÉÅÏùò ÎåÄÏö©Îüâ Ïù¥ÎØ∏ÏßÄÎì§:"
              printf '%s\n' "${large_images[@]}"
              echo "::warning::Large images found that should be optimized"
            else
              echo "‚úÖ Î™®Îì† Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï†ÅÏ†àÌïú ÌÅ¨Í∏∞ÏûÖÎãàÎã§"
            fi
          else
            echo "‚ÑπÔ∏è Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏù¥ ÏóÜÏäµÎãàÎã§"
          fi

      - name: üìä Bundle Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
        if: always()
        run: |
          cat > bundle-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "total_size_mb": "${{ steps.*.outputs.bundle-total-size }}",
            "js_size_mb": "${{ steps.*.outputs.bundle-js-size }}",
            "css_size_mb": "${{ steps.*.outputs.bundle-css-size }}"
          }
          EOF

      - name: üì§ Bundle Î∂ÑÏÑù ÏïÑÌã∞Ìå©Ìä∏ ÏóÖÎ°úÎìú
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ github.sha }}
          path: |
            .next/analyze/
            bundle-report.json
          retention-days: 7

  # Core Web Vitals Î∞è ÏÑ±Îä• ÌÖåÏä§Ìä∏
  performance-testing:
    name: ‚ö° ÏÑ±Îä• ÌÖåÏä§Ìä∏
    runs-on: ubuntu-latest
    needs: bundle-analysis
    timeout-minutes: 20
    
    steps:
      - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: üîß Node.js ÏÑ§Ï†ï
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üì¶ ÏùòÏ°¥ÏÑ± ÏÑ§Ïπò
        run: |
          npm ci --no-audit --no-fund
          npm install --no-save @playwright/test lighthouse puppeteer

      - name: üèóÔ∏è ÎπåÎìú
        run: npm run build

      - name: üöÄ ÏÑúÎ≤Ñ ÏãúÏûë
        run: |
          npm start &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
          
          # ÏÑúÎ≤Ñ Ï§ÄÎπÑ ÎåÄÍ∏∞
          echo "‚è≥ ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "‚úÖ ÏÑúÎ≤ÑÍ∞Ä ÏãúÏûëÎêòÏóàÏäµÎãàÎã§"
              break
            fi
            echo "ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë... ($i/30)"
            sleep 2
          done

      - name: üìä Lighthouse ÏÑ±Îä• ÌÖåÏä§Ìä∏
        run: |
          echo "üîç Lighthouse ÏÑ±Îä• ÌÖåÏä§Ìä∏ Ïã§Ìñâ..."
          
          cat > performance-test.js << 'EOF'
          const lighthouse = require('lighthouse');
          const chromeLauncher = require('chrome-launcher');
          const fs = require('fs');
          
          async function runLighthouse() {
            const chrome = await chromeLauncher.launch({chromeFlags: ['--headless', '--no-sandbox', '--disable-dev-shm-usage']});
            const options = {
              logLevel: 'info',
              output: 'json',
              onlyCategories: ['performance', 'accessibility', 'best-practices', 'seo'],
              port: chrome.port,
            };
            
            const runnerResult = await lighthouse('http://localhost:3000', options);
            await chrome.kill();
            
            const report = runnerResult.lhr;
            
            // Core Web Vitals Ï∂îÏ∂ú
            const metrics = {
              performance: Math.round(report.categories.performance.score * 100),
              accessibility: Math.round(report.categories.accessibility.score * 100),
              bestPractices: Math.round(report.categories['best-practices'].score * 100),
              seo: Math.round(report.categories.seo.score * 100),
              fcp: report.audits['first-contentful-paint'].numericValue,
              lcp: report.audits['largest-contentful-paint'].numericValue,
              cls: report.audits['cumulative-layout-shift'].numericValue,
              fid: report.audits['max-potential-fid']?.numericValue || 0,
              ttfb: report.audits['server-response-time'].numericValue
            };
            
            fs.writeFileSync('lighthouse-results.json', JSON.stringify(report, null, 2));
            fs.writeFileSync('performance-metrics.json', JSON.stringify(metrics, null, 2));
            
            console.log('üìä Lighthouse Í≤∞Í≥º:');
            console.log(`  Performance: ${metrics.performance}/100`);
            console.log(`  Accessibility: ${metrics.accessibility}/100`);
            console.log(`  Best Practices: ${metrics.bestPractices}/100`);
            console.log(`  SEO: ${metrics.seo}/100`);
            console.log('\n‚ö° Core Web Vitals:');
            console.log(`  FCP: ${(metrics.fcp/1000).toFixed(2)}s`);
            console.log(`  LCP: ${(metrics.lcp/1000).toFixed(2)}s`);
            console.log(`  CLS: ${metrics.cls.toFixed(3)}`);
            console.log(`  TTFB: ${(metrics.ttfb/1000).toFixed(2)}s`);
            
            return metrics;
          }
          
          runLighthouse().catch(console.error);
          EOF
          
          node performance-test.js

      - name: üìà ÏÑ±Îä• Í∏∞Ï§Ä Í≤ÄÏ¶ù
        run: |
          echo "üéØ ÏÑ±Îä• Í∏∞Ï§Ä Í≤ÄÏ¶ù..."
          
          if [ -f "performance-metrics.json" ]; then
            performance=$(jq -r '.performance' performance-metrics.json)
            accessibility=$(jq -r '.accessibility' performance-metrics.json)
            lcp=$(jq -r '.lcp' performance-metrics.json)
            cls=$(jq -r '.cls' performance-metrics.json)
            
            echo "ÌòÑÏû¨ Ï†êÏàò:"
            echo "  Performance: $performance/100 (Î™©Ìëú: 90+)"
            echo "  Accessibility: $accessibility/100 (Î™©Ìëú: 95+)"
            echo "  LCP: $(echo "scale=2; $lcp/1000" | bc -l)s (Î™©Ìëú: <2.5s)"
            echo "  CLS: $cls (Î™©Ìëú: <0.1)"
            
            failures=()
            
            if [ "$performance" -lt 90 ]; then
              failures+=("Performance Ï†êÏàò Î∂ÄÏ°±: $performance < 90")
            fi
            
            if [ "$accessibility" -lt 95 ]; then
              failures+=("Accessibility Ï†êÏàò Î∂ÄÏ°±: $accessibility < 95")
            fi
            
            if [ "$(echo "$lcp > 2500" | bc -l)" -eq 1 ]; then
              failures+=("LCP ÎÑàÎ¨¥ ÎäêÎ¶º: $(echo "scale=2; $lcp/1000" | bc -l)s > 2.5s")
            fi
            
            if [ "$(echo "$cls > 0.1" | bc -l)" -eq 1 ]; then
              failures+=("CLS ÎÑàÎ¨¥ ÎÜíÏùå: $cls > 0.1")
            fi
            
            if [ ${#failures[@]} -gt 0 ]; then
              echo "‚ùå ÏÑ±Îä• Í∏∞Ï§Ä ÎØ∏Îã¨:"
              printf '%s\n' "${failures[@]}"
              echo "::warning::Performance standards not met"
            else
              echo "‚úÖ Î™®Îì† ÏÑ±Îä• Í∏∞Ï§ÄÏùÑ Ï∂©Ï°±Ìï©ÎãàÎã§!"
            fi
          fi

      - name: üßπ ÏÑúÎ≤Ñ Ï†ïÎ¶¨
        if: always()
        run: |
          if [ -n "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi
          pkill -f "next start" || true

      - name: üì§ ÏÑ±Îä• ÌÖåÏä§Ìä∏ Í≤∞Í≥º ÏóÖÎ°úÎìú
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-results-${{ github.sha }}
          path: |
            lighthouse-results.json
            performance-metrics.json
          retention-days: 30

  # Ïù¥ÎØ∏ÏßÄ Î∞è ÏóêÏÖã ÏµúÏ†ÅÌôî Í≤ÄÏ¶ù
  asset-optimization:
    name: üñºÔ∏è ÏóêÏÖã ÏµúÏ†ÅÌôî
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üì• ÏΩîÎìú Ï≤¥ÌÅ¨ÏïÑÏõÉ
        uses: actions/checkout@v4

      - name: üîß Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî ÎèÑÍµ¨ ÏÑ§Ïπò
        run: |
          npm install --no-save imagemin imagemin-mozjpeg imagemin-pngquant imagemin-svgo
          
      - name: üìä Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî Î∂ÑÏÑù
        run: |
          cat > image-optimizer.js << 'EOF'
          const imagemin = require('imagemin');
          const imageminMozjpeg = require('imagemin-mozjpeg');
          const imageminPngquant = require('imagemin-pngquant');
          const imageminSvgo = require('imagemin-svgo');
          const fs = require('fs');
          const path = require('path');
          
          async function analyzeImages() {
            const publicDir = 'public';
            if (!fs.existsSync(publicDir)) {
              console.log('üìÅ public ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§');
              return;
            }
            
            // Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ï∞æÍ∏∞
            function findImages(dir) {
              const images = [];
              const files = fs.readdirSync(dir);
              
              for (const file of files) {
                const filePath = path.join(dir, file);
                const stat = fs.statSync(filePath);
                
                if (stat.isDirectory()) {
                  images.push(...findImages(filePath));
                } else if (/\.(jpg|jpeg|png|svg)$/i.test(file)) {
                  images.push(filePath);
                }
              }
              
              return images;
            }
            
            const images = findImages(publicDir);
            console.log(`üîç Î∞úÍ≤¨Îêú Ïù¥ÎØ∏ÏßÄ: ${images.length}Í∞ú`);
            
            let totalOriginalSize = 0;
            let totalOptimizedSize = 0;
            const optimizationResults = [];
            
            for (const imagePath of images) {
              const originalSize = fs.statSync(imagePath).size;
              totalOriginalSize += originalSize;
              
              try {
                const optimized = await imagemin([imagePath], {
                  plugins: [
                    imageminMozjpeg({quality: 80}),
                    imageminPngquant({quality: [0.6, 0.8]}),
                    imageminSvgo()
                  ]
                });
                
                if (optimized.length > 0) {
                  const optimizedSize = optimized[0].data.length;
                  totalOptimizedSize += optimizedSize;
                  
                  const savings = originalSize - optimizedSize;
                  const savingsPercent = ((savings / originalSize) * 100).toFixed(1);
                  
                  optimizationResults.push({
                    path: imagePath,
                    originalSize: originalSize,
                    optimizedSize: optimizedSize,
                    savings: savings,
                    savingsPercent: savingsPercent
                  });
                  
                  console.log(`üì∑ ${imagePath}: ${(originalSize/1024).toFixed(1)}KB ‚Üí ${(optimizedSize/1024).toFixed(1)}KB (-${savingsPercent}%)`);
                }
              } catch (error) {
                console.log(`‚ùå ${imagePath} ÏµúÏ†ÅÌôî Ïã§Ìå®:`, error.message);
              }
            }
            
            const totalSavings = totalOriginalSize - totalOptimizedSize;
            const totalSavingsPercent = ((totalSavings / totalOriginalSize) * 100).toFixed(1);
            
            console.log(`\nüìä Ï†ÑÏ≤¥ ÏµúÏ†ÅÌôî Í≤∞Í≥º:`);
            console.log(`  ÏõêÎ≥∏ ÌÅ¨Í∏∞: ${(totalOriginalSize/1024/1024).toFixed(2)}MB`);
            console.log(`  ÏµúÏ†ÅÌôî ÌõÑ: ${(totalOptimizedSize/1024/1024).toFixed(2)}MB`);
            console.log(`  Ï†àÏïΩ: ${(totalSavings/1024/1024).toFixed(2)}MB (-${totalSavingsPercent}%)`);
            
            fs.writeFileSync('image-optimization.json', JSON.stringify({
              totalImages: images.length,
              totalOriginalSize,
              totalOptimizedSize,
              totalSavings,
              totalSavingsPercent,
              results: optimizationResults
            }, null, 2));
            
            if (totalSavingsPercent > 20) {
              console.log(`‚ö†Ô∏è Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôîÎ°ú ${totalSavingsPercent}% Ï†àÏïΩ Í∞ÄÎä•Ìï©ÎãàÎã§!`);
            } else {
              console.log(`‚úÖ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ïûò ÏµúÏ†ÅÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§`);
            }
          }
          
          analyzeImages().catch(console.error);
          EOF
          
          node image-optimizer.js

      - name: üì¶ Ï†ïÏ†Å ÏóêÏÖã Î∂ÑÏÑù
        run: |
          echo "üìä Ï†ïÏ†Å ÏóêÏÖã Î∂ÑÏÑù..."
          
          if [ -d "public" ]; then
            # Ï†ÑÏ≤¥ public ÎîîÎ†âÌÜ†Î¶¨ ÌÅ¨Í∏∞
            public_size=$(du -sm public | cut -f1)
            echo "Public ÎîîÎ†âÌÜ†Î¶¨ ÌÅ¨Í∏∞: ${public_size}MB"
            
            # ÌååÏùº Ïú†ÌòïÎ≥Ñ Î∂ÑÏÑù
            echo "\nüìÅ ÌååÏùº Ïú†ÌòïÎ≥Ñ Î∂ÑÏÑù:"
            find public -type f -exec file {} \; | awk -F: '{print $2}' | sort | uniq -c | sort -nr
            
            # ÌÅ∞ ÌååÏùºÎì§ Ï∞æÍ∏∞
            echo "\nüìè 1MB Ïù¥ÏÉÅ ÌååÏùºÎì§:"
            find public -type f -size +1M -exec ls -lh {} \; | awk '{print $5 " " $9}' || echo "1MB Ïù¥ÏÉÅ ÌååÏùº ÏóÜÏùå"
            
            if [ "$public_size" -gt 50 ]; then
              echo "‚ö†Ô∏è Public ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÌÅΩÎãàÎã§ (${public_size}MB > 50MB)"
              echo "::warning::Large public directory: ${public_size}MB"
            fi
          else
            echo "‚ÑπÔ∏è public ÎîîÎ†âÌÜ†Î¶¨Í∞Ä ÏóÜÏäµÎãàÎã§"
          fi

      - name: üì§ ÏóêÏÖã Î∂ÑÏÑù Í≤∞Í≥º ÏóÖÎ°úÎìú
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: asset-optimization-${{ github.sha }}
          path: |
            image-optimization.json
          retention-days: 7

  # ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
  performance-report:
    name: üìä ÏÑ±Îä• Î¶¨Ìè¨Ìä∏
    runs-on: ubuntu-latest
    needs: [bundle-analysis, performance-testing, asset-optimization]
    if: always()
    
    steps:
      - name: üì• ÏïÑÌã∞Ìå©Ìä∏ Îã§Ïö¥Î°úÎìú
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: üìã ÌÜµÌï© ÏÑ±Îä• Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
        run: |
          echo "# üöÄ dduksangLAB ÏÑ±Îä• Î∂ÑÏÑù Î¶¨Ìè¨Ìä∏" > performance-report.md
          echo "" >> performance-report.md
          echo "ÏÉùÏÑ± ÏãúÍ∞Ñ: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> performance-report.md
          echo "Ïª§Î∞ã: ${{ github.sha }}" >> performance-report.md
          echo "Î∏åÎûúÏπò: ${{ github.ref_name }}" >> performance-report.md
          echo "" >> performance-report.md
          
          # Bundle Î∂ÑÏÑù Í≤∞Í≥º
          echo "## üì¶ Bundle Î∂ÑÏÑù" >> performance-report.md
          if [ -f "artifacts/bundle-analysis-*/bundle-report.json" ]; then
            bundle_report=$(find artifacts -name "bundle-report.json" | head -1)
            total_size=$(jq -r '.total_size_mb // "N/A"' "$bundle_report")
            js_size=$(jq -r '.js_size_mb // "N/A"' "$bundle_report")
            css_size=$(jq -r '.css_size_mb // "N/A"' "$bundle_report")
            
            echo "- Ï†ÑÏ≤¥ Bundle ÌÅ¨Í∏∞: ${total_size}MB" >> performance-report.md
            echo "- JavaScript ÌÅ¨Í∏∞: ${js_size}MB" >> performance-report.md
            echo "- CSS ÌÅ¨Í∏∞: ${css_size}MB" >> performance-report.md
          else
            echo "- Bundle Î∂ÑÏÑù Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå" >> performance-report.md
          fi
          echo "" >> performance-report.md
          
          # ÏÑ±Îä• ÌÖåÏä§Ìä∏ Í≤∞Í≥º
          echo "## ‚ö° ÏÑ±Îä• ÌÖåÏä§Ìä∏ Í≤∞Í≥º" >> performance-report.md
          if [ -f "artifacts/performance-results-*/performance-metrics.json" ]; then
            perf_metrics=$(find artifacts -name "performance-metrics.json" | head -1)
            performance=$(jq -r '.performance // "N/A"' "$perf_metrics")
            accessibility=$(jq -r '.accessibility // "N/A"' "$perf_metrics")
            lcp=$(jq -r '.lcp // 0' "$perf_metrics")
            cls=$(jq -r '.cls // 0' "$perf_metrics")
            
            echo "### Lighthouse Ï†êÏàò" >> performance-report.md
            echo "- Performance: ${performance}/100 üéØ Î™©Ìëú: 90+" >> performance-report.md
            echo "- Accessibility: ${accessibility}/100 üéØ Î™©Ìëú: 95+" >> performance-report.md
            echo "" >> performance-report.md
            echo "### Core Web Vitals" >> performance-report.md
            echo "- LCP: $(echo "scale=2; $lcp/1000" | bc -l)s üéØ Î™©Ìëú: <2.5s" >> performance-report.md
            echo "- CLS: $cls üéØ Î™©Ìëú: <0.1" >> performance-report.md
          else
            echo "- ÏÑ±Îä• ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå" >> performance-report.md
          fi
          echo "" >> performance-report.md
          
          # Í∂åÏû•ÏÇ¨Ìï≠
          echo "## üí° ÏµúÏ†ÅÌôî Í∂åÏû•ÏÇ¨Ìï≠" >> performance-report.md
          echo "1. **Bundle ÌÅ¨Í∏∞ Í¥ÄÎ¶¨**: ÏΩîÎìú Ïä§ÌîåÎ¶¨ÌåÖ Î∞è dynamic import ÌôúÏö©" >> performance-report.md
          echo "2. **Ïù¥ÎØ∏ÏßÄ ÏµúÏ†ÅÌôî**: Next.js Image Ïª¥Ìè¨ÎÑåÌä∏ Ï†ÅÍ∑π ÌôúÏö©" >> performance-report.md
          echo "3. **Ìè∞Ìä∏ ÏµúÏ†ÅÌôî**: font-display: swap ÏÑ§Ï†ï" >> performance-report.md
          echo "4. **Ï∫êÏã± Ï†ÑÎûµ**: Ï†ÅÏ†àÌïú Cache-Control Ìó§Îçî ÏÑ§Ï†ï" >> performance-report.md
          echo "5. **Core Web Vitals**: ÏßÄÏÜçÏ†ÅÏù∏ Î™®ÎãàÌÑ∞ÎßÅ Î∞è Í∞úÏÑ†" >> performance-report.md
          
          cat performance-report.md >> $GITHUB_STEP_SUMMARY

      - name: üì§ ÏµúÏ¢Ö Î¶¨Ìè¨Ìä∏ ÏóÖÎ°úÎìú
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_id }}
          path: performance-report.md
          retention-days: 30