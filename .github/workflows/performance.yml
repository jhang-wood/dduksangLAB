name: 🛡️ 2025 스마트 최소 CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'

jobs:
  # Setup job - 의존성 설치 및 캐싱
  setup:
    name: 📦 Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 🗝️ 캐시 키 생성
      id: cache-key
      run: echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
    
    - name: 📦 의존성 설치
      run: npm ci --no-audit --no-fund

  # 병렬 실행 작업들
  typescript-check:
    name: 🚨 TypeScript 체크
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: 📦 의존성 복원
      run: npm ci --no-audit --no-fund
    - name: 🚨 CRITICAL: TypeScript 타입 체크
      run: npm run type-check

  build-test:
    name: 🚨 빌드 테스트
    runs-on: ubuntu-latest
    needs: setup
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: 📦 의존성 복원
      run: npm ci --no-audit --no-fund
    - name: 🚨 CRITICAL: 빌드 테스트
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SKIP_ENV_VALIDATION: true
      run: npm run build

  lint-check:
    name: ⚠️ ESLint 체크
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true # 린트 에러는 경고만
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: 📦 의존성 복원
      run: npm ci --no-audit --no-fund
    - name: ⚠️ ESLint 기본 체크 (경고만)
      run: npm run lint -- --quiet --max-warnings 15

  # 최종 상태 체크
  deploy-ready:
    name: ✅ 배포 준비 확인
    runs-on: ubuntu-latest
    needs: [typescript-check, build-test, lint-check]
    if: always()
    steps:
    - name: ✅ 배포 상태 확인
      run: |
        echo "🎯 2025년 스마트 1인 개발자 표준 체크 완료"
        echo "✅ TypeScript: ${{ needs.typescript-check.result }}"  
        echo "✅ 빌드 테스트: ${{ needs.build-test.result }}"
        echo "⚠️ ESLint: ${{ needs.lint-check.result }} (경고 허용)"
        if [ "${{ needs.typescript-check.result }}" != "success" ] || [ "${{ needs.build-test.result }}" != "success" ]; then
          echo "🚫 CRITICAL 체크 실패 - 배포 중단"
          exit 1
        fi
        echo "🚀 Vercel 자동 배포 시작됨"
