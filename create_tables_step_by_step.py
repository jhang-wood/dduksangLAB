#!/usr/bin/env python3
"""
Supabase ÌÖåÏù¥Î∏î Îã®Í≥ÑÎ≥Ñ ÏÉùÏÑ± Ïä§ÌÅ¨Î¶ΩÌä∏
"""
import requests
import json
import time

# Supabase ÏÑ§Ï†ï
SUPABASE_URL = "https://wpzvocfgfwvsxmpckdnu.supabase.co"
SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndwenZvY2ZnZnd2c3htcGNrZG51Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjY2Nzg1MiwiZXhwIjoyMDY4MjQzODUyfQ.c7vRQStMHbBZRjkDDM_iXdLWq4t0HWBvDNbkC7P6Z6c"

def execute_supabase_query(table, method="GET", data=None, select="*"):
    """Supabase REST API Ìò∏Ï∂ú"""
    url = f"{SUPABASE_URL}/rest/v1/{table}"
    if method == "GET":
        url += f"?select={select}&limit=1"
    
    headers = {
        "apikey": SERVICE_ROLE_KEY,
        "Authorization": f"Bearer {SERVICE_ROLE_KEY}",
        "Content-Type": "application/json"
    }
    
    try:
        if method == "GET":
            response = requests.get(url, headers=headers)
        elif method == "POST":
            response = requests.post(url, headers=headers, json=data)
        
        print(f"üîç {table} ÌÖåÏù¥Î∏î {method}: {response.status_code}")
        if response.status_code < 400:
            print(f"‚úÖ ÏÑ±Í≥µ: {response.text[:200]}")
            return True, response.json() if response.text else None
        else:
            print(f"‚ùå Ïã§Ìå®: {response.text}")
            return False, response.text
    except Exception as e:
        print(f"‚ùå Ïò§Î•ò: {e}")
        return False, str(e)

def check_table_exists(table_name):
    """ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏"""
    success, result = execute_supabase_query(table_name, "GET", select="*")
    return success

def create_sample_data():
    """ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±"""
    
    print("\nüìã 1. profiles ÌÖåÏù¥Î∏îÏóê author_name Ï∂îÍ∞ÄÏö© ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏...")
    # profiles ÌÖåÏù¥Î∏îÏùÄ auth.usersÏôÄ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏñ¥ÏÑú ÏßÅÏ†ë ÏÉùÏÑ± Î∂àÍ∞Ä
    
    print("\nüìã 2. community_posts ÌÖåÏù¥Î∏îÏóê author_name Ï∂îÍ∞Ä...")
    # community_postsÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä (author_name Ìè¨Ìï®)
    sample_post = {
        "id": "sample-post-1",
        "title": "AI Agent ÎßàÏä§ÌÑ∞Í≥ºÏ†ï ÏàòÍ∞ï ÌõÑÍ∏∞",
        "content": "Ï†ïÎßê Ïú†ÏùµÌïú Í∞ïÏùòÏòÄÏäµÎãàÎã§. ChatGPT APIÎ•º ÌôúÏö©Ìïú Ïã§Ï†Ñ ÌîÑÎ°úÏ†ùÌä∏Î•º ÌÜµÌï¥ ÎßéÏùÄ Í≤ÉÏùÑ Î∞∞Ïõ†Ïñ¥Ïöî!",
        "category": "review",
        "author_name": "ÏàòÍ∞ïÏÉù1",
        "tags": ["AI", "ÌõÑÍ∏∞", "ChatGPT"],
        "views": 156,
        "likes": 23,
        "comments_count": 5,
        "is_pinned": False,
        "is_featured": True
    }
    
    success, result = execute_supabase_query("community_posts", "POST", sample_post)
    if success:
        print("‚úÖ community_posts ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏÑ±Í≥µ")
    else:
        print("‚ùå community_posts ÏÉùÏÑ± Ïã§Ìå® - Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÍ±∞ÎÇò Ïä§ÌÇ§Îßà Î¨∏Ï†ú")
    
    print("\nüìã 3. showcase_sites ÌÖåÏù¥Î∏îÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä...")
    sample_site = {
        "id": "sample-site-1",
        "name": "AI ÏΩòÌÖêÏ∏† ÏÉùÏÑ±Í∏∞",
        "description": "ChatGPTÎ•º ÌôúÏö©Ìïú ÏûêÎèô ÏΩòÌÖêÏ∏† ÏÉùÏÑ± ÎèÑÍµ¨ÏûÖÎãàÎã§.",
        "url": "https://ai-content-generator.example.com",
        "thumbnail_url": "https://via.placeholder.com/400x300/1a1a1a/f4c430?text=AI+Content",
        "category": "AI",
        "tags": ["AI", "Content", "ChatGPT"],
        "views": 1234,
        "likes": 89,
        "is_featured": True
    }
    
    success, result = execute_supabase_query("showcase_sites", "POST", sample_site)
    if success:
        print("‚úÖ showcase_sites ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏÑ±Í≥µ")
    else:
        print("‚ùå showcase_sites ÏÉùÏÑ± Ïã§Ìå® - Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÍ±∞ÎÇò Ïä§ÌÇ§Îßà Î¨∏Ï†ú")
    
    print("\nüìã 4. lecture_chapters ÌÖåÏù¥Î∏îÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä...")
    sample_chapter = {
        "id": "chapter-1",
        "lecture_id": "ai-agent-master",  # Í∏∞Ï°¥ Í∞ïÏùò ID ÏÇ¨Ïö©
        "title": "Í∞ïÏùò ÏÜåÍ∞ú Î∞è Í∞úÏöî",
        "description": "AI Agent ÎßàÏä§ÌÑ∞Í≥ºÏ†ïÏùò Ï†ÑÏ≤¥Ï†ÅÏù∏ ÎÇ¥Ïö©Í≥º ÌïôÏäµ Î™©ÌëúÎ•º ÏÜåÍ∞úÌï©ÎãàÎã§.",
        "video_url": "https://www.youtube.com/watch?v=sample1",
        "duration": 900,
        "order_index": 1,
        "is_preview": True
    }
    
    success, result = execute_supabase_query("lecture_chapters", "POST", sample_chapter)
    if success:
        print("‚úÖ lecture_chapters ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏÑ±Í≥µ")
    else:
        print("‚ùå lecture_chapters ÏÉùÏÑ± Ïã§Ìå® - ÌÖåÏù¥Î∏îÏù¥ ÏóÜÍ±∞ÎÇò Ïä§ÌÇ§Îßà Î¨∏Ï†ú")
    
    print("\nüìã 5. saas_products ÌÖåÏù¥Î∏îÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä...")
    sample_product = {
        "id": "product-1",
        "name": "ChatGPT Plus",
        "description": "OpenAIÏùò ÌîÑÎ¶¨ÎØ∏ÏóÑ AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ ÏÑúÎπÑÏä§",
        "category": "AI Assistant",
        "pricing_model": "subscription",
        "price_monthly": 20000,
        "website_url": "https://chat.openai.com",
        "features": ["GPT-4 Ï†ëÍ∑º", "Î¨¥Ï†úÌïú ÏÇ¨Ïö©", "ÌîåÎü¨Í∑∏Ïù∏ ÏßÄÏõê"],
        "tags": ["AI", "ChatGPT", "OpenAI"],
        "rating": 4.8,
        "is_recommended": True
    }
    
    success, result = execute_supabase_query("saas_products", "POST", sample_product)
    if success:
        print("‚úÖ saas_products ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± ÏÑ±Í≥µ")
    else:
        print("‚ùå saas_products ÏÉùÏÑ± Ïã§Ìå® - ÌÖåÏù¥Î∏îÏù¥ ÏóÜÏùå")

def check_all_tables():
    """Î™®Îì† ÌïÑÏöîÌïú ÌÖåÏù¥Î∏î Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏"""
    tables = [
        "profiles",
        "lectures", 
        "community_posts",
        "showcase_sites",
        "lecture_chapters",
        "saas_products",
        "payments",
        "lecture_enrollments"
    ]
    
    print("üîç Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÌôïÏù∏...")
    existing_tables = []
    missing_tables = []
    
    for table in tables:
        print(f"\nüìã {table} ÌÖåÏù¥Î∏î ÌôïÏù∏ Ï§ë...")
        if check_table_exists(table):
            existing_tables.append(table)
            print(f"‚úÖ {table} Ï°¥Ïû¨")
        else:
            missing_tables.append(table)
            print(f"‚ùå {table} ÏóÜÏùå")
    
    print(f"\nüìä Í≤∞Í≥º:")
    print(f"‚úÖ Ï°¥Ïû¨ÌïòÎäî ÌÖåÏù¥Î∏î: {existing_tables}")
    print(f"‚ùå ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏î: {missing_tables}")
    
    return existing_tables, missing_tables

def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    print("üöÄ Supabase Í¥ÄÎ¶¨ÏûêÌéòÏù¥ÏßÄ ÌÖåÏù¥Î∏î ÌôïÏù∏ Î∞è ÏàòÏ†ï ÏãúÏûë...")
    
    # 1. Í∏∞Ï°¥ ÌÖåÏù¥Î∏î ÌôïÏù∏
    existing_tables, missing_tables = check_all_tables()
    
    # 2. ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏îÏù¥ ÏûàÎäî Í≤ΩÏö∞ ÏïåÎ¶º
    if missing_tables:
        print(f"\n‚ö†Ô∏è  ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏îÎì§: {missing_tables}")
        print("Ïù¥ ÌÖåÏù¥Î∏îÎì§ÏùÄ Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú SQL EditorÎ°ú ÏßÅÏ†ë ÏÉùÏÑ±Ìï¥Ïïº Ìï©ÎãàÎã§.")
        
        # Í∞Å ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏îÏóê ÎåÄÌïú ÏÉùÏÑ± SQL Ï†úÍ≥µ
        table_sqls = {
            "lecture_chapters": """
CREATE TABLE public.lecture_chapters (
    id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::TEXT,
    lecture_id TEXT NOT NULL REFERENCES public.lectures(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    video_url TEXT NOT NULL,
    duration INTEGER NOT NULL DEFAULT 0,
    order_index INTEGER NOT NULL,
    is_preview BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(lecture_id, order_index)
);
ALTER TABLE public.lecture_chapters ENABLE ROW LEVEL SECURITY;
""",
            "saas_products": """
CREATE TABLE public.saas_products (
    id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::TEXT,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    category TEXT NOT NULL,
    pricing_model TEXT NOT NULL CHECK (pricing_model IN ('free', 'freemium', 'paid', 'subscription')),
    price_monthly INTEGER DEFAULT 0,
    price_yearly INTEGER DEFAULT 0,
    website_url TEXT,
    logo_url TEXT,
    features TEXT[] DEFAULT '{}',
    tags TEXT[] DEFAULT '{}',
    rating DECIMAL(3,2) DEFAULT 0.0,
    review_count INTEGER DEFAULT 0,
    is_recommended BOOLEAN DEFAULT false,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.saas_products ENABLE ROW LEVEL SECURITY;
""",
            "payments": """
CREATE TABLE public.payments (
    id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::TEXT,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    lecture_id TEXT REFERENCES public.lectures(id) ON DELETE CASCADE,
    amount INTEGER NOT NULL,
    currency TEXT DEFAULT 'KRW',
    status TEXT NOT NULL CHECK (status IN ('pending', 'completed', 'failed', 'refunded')),
    payment_method TEXT,
    transaction_id TEXT,
    provider TEXT,
    provider_payment_id TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;
""",
            "lecture_enrollments": """
CREATE TABLE public.lecture_enrollments (
    id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::TEXT,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    lecture_id TEXT NOT NULL REFERENCES public.lectures(id) ON DELETE CASCADE,
    enrolled_at TIMESTAMPTZ DEFAULT NOW(),
    progress INTEGER DEFAULT 0,
    completed_at TIMESTAMPTZ,
    last_watched_chapter_id TEXT REFERENCES public.lecture_chapters(id),
    UNIQUE(user_id, lecture_id)
);
ALTER TABLE public.lecture_enrollments ENABLE ROW LEVEL SECURITY;
"""
        }
        
        print("\nüìã ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏î ÏÉùÏÑ± SQL:")
        for table in missing_tables:
            if table in table_sqls:
                print(f"\n-- {table.upper()} ÌÖåÏù¥Î∏î ÏÉùÏÑ±")
                print(table_sqls[table])
    
    # 3. Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
    print("\nüéØ Í∏∞Ï°¥ ÌÖåÏù¥Î∏îÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä...")
    create_sample_data()
    
    print("\nüéâ ÏûëÏóÖ ÏôÑÎ£å!")
    print("\nüìù Îã§Ïùå Îã®Í≥Ñ:")
    print("1. Supabase ÎåÄÏãúÎ≥¥Îìú ‚Üí SQL EditorÎ°ú Ïù¥Îèô")
    print("2. ÏúÑÏóê Ï∂úÎ†•Îêú ÎàÑÎùΩÎêú ÌÖåÏù¥Î∏î ÏÉùÏÑ± SQLÏùÑ Î≥µÏÇ¨Ìï¥ÏÑú Ïã§Ìñâ")
    print("3. Í¥ÄÎ¶¨ÏûêÌéòÏù¥ÏßÄÏóêÏÑú Ï†ïÏÉÅ ÏûëÎèô ÌôïÏù∏")

if __name__ == "__main__":
    main()